const config = require('../config.json');
const snoowrap = require('snoowrap');
const fetch = require("node-fetch");
const {DateTime} = require("luxon");
const fs = require('fs');
const Discord = require('discord.js');
const client = new Discord.Client();
const sharedFunc = require("../sharedFunc");

const login = new snoowrap({
    userAgent: config.userAgent,
    clientId: config.clientId,
    clientSecret: config.clientSecret,
    refreshToken: config.refreshToken
});

const subreddit = login.getSubreddit('AnimeCalendar');

client.on('ready', x => {
    console.log("i'm lit on " + client.guilds.cache.size + " servers.")
});

/**
 * @case config.prefix + "today": This should post the highest voted post on Hot that matches today's date. It's
 * probably overkill to use luxon just to fetch today's date but uh, it's fine. It uses "selectedHighestVoted" so that
 * it knows to stop sending images. It uses both that and counter to check if it even sent a message at all, if it
 * didn't, it returns that it couldn't find anything.
 *
 * @case config.prefix + "todayAll": It posts absolutely every post matching today's date. If it doesn't it runs the checks above.
 */
client.on('message', async msg => {
    let selectedHighestVoted = false;
    let counter = 0;
    let today = DateTime.local().day;

    switch (msg.content) {
        case config.prefix + "today":
            let post = await sharedFunc.getImgUrl(subreddit, selectedHighestVoted, counter, today,false);
            msg.channel.send(post.url);
            break;

        case config.prefix + "todayAll":
            let posts = await sharedFunc.getImgUrl(subreddit, selectedHighestVoted, counter, today, true);
            msg.channel.send(sharedFunc.paginationEmbed(msg, await urlArrToEmbedArr(posts)));
            break;
    }
});

/**
 * This function takes the array of posts generated by getImgUrl() and transforms it into an array of discord embeds
 * so that it can be fed into paginationEmbed() and create the paginated embed output. This function is only used
 * for the "todayAll" case because sending a single image will auto-generate an embed, therefore no need for a
 * conversion function.
 * @param   posts => Array of post objects obtained from getImgUrl()
 * @returns Discord.MessageEmbed[]
 */
const urlArrToEmbedArr = async (posts) => {
    return posts.map(post => {
        return new Discord.MessageEmbed()
            .setTitle(post.title)
            .setURL(post.url)
            .setColor("#3e3e3e")
            .setImage(post.url)
    })
};

client.login(config.discordToken);
